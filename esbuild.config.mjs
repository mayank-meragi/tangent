import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// Bundle system templates into the plugin
function bundleSystemTemplates() {
  const templatesDir = path.join(process.cwd(), 'templates');
  const bundledTemplates = {};
  
  if (fs.existsSync(templatesDir)) {
    const templateFiles = fs.readdirSync(templatesDir)
      .filter(file => file.endsWith('.md'))
      .sort();
    
    for (const file of templateFiles) {
      const filePath = path.join(templatesDir, file);
      const content = fs.readFileSync(filePath, 'utf8');
      const relativePath = path.relative(process.cwd(), filePath);
      bundledTemplates[relativePath] = content;
    }
    
    console.log(`üì¶ Bundled ${Object.keys(bundledTemplates).length} system templates`);
  } else {
    console.log('‚ö†Ô∏è  No templates directory found, skipping template bundling');
  }
  
  return bundledTemplates;
}

// Bundle system personas into the plugin
function bundleSystemPersonas() {
  const personasDir = path.join(process.cwd(), 'tangent/personas');
  const bundledPersonas = {};
  
  if (fs.existsSync(personasDir)) {
    const personaFiles = fs.readdirSync(personasDir)
      .filter(file => file.endsWith('.md'))
      .sort();
    
    for (const file of personaFiles) {
      const filePath = path.join(personasDir, file);
      const content = fs.readFileSync(filePath, 'utf8');
      const relativePath = path.relative(process.cwd(), filePath);
      bundledPersonas[relativePath] = content;
    }
    
    console.log(`üì¶ Bundled ${Object.keys(bundledPersonas).length} system personas`);
  } else {
    console.log('‚ö†Ô∏è  No personas directory found, skipping persona bundling');
  }
  
  return bundledPersonas;
}

const systemTemplates = bundleSystemTemplates();
const systemPersonas = bundleSystemPersonas();

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.tsx"],
	bundle: true,
	platform: "node",
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
	define: {
		'global': 'globalThis',
		'process.env.NODE_ENV': prod ? '"production"' : '"development"',
		// Inject bundled templates into the build
		'globalThis.__SYSTEM_TEMPLATES__': JSON.stringify(systemTemplates),
		// Inject bundled personas into the build
		'globalThis.__SYSTEM_PERSONAS__': JSON.stringify(systemPersonas),
	},
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
